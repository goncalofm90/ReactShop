{"ast":null,"code":"import { CART_ADD_ITEM, CART_REMOVE_ITEM, CART_SAVE_SHIPPING_ADDRESS } from \"../constants/cartConstants\";\nexport const cartReducer = (state = {\n  cartItems: [],\n  shippingAddress: {}\n}, action) => {\n  switch (action.type) {\n    case CART_ADD_ITEM:\n      const item = action.payload; // search in the state.cartItems array\n      // for the existence of the specific product\n      // that is defined by item (by the action.payload)\n      // if we find a match assign the result to the existItem variable\n\n      const existItem = state.cartItems.find(x => x.product === item.product); // if there is already a product matching the item in the state.cartItems array\n\n      if (existItem) {\n        // return the existing state with adjusted cardItems\n        return { ...state,\n          // map through the cardItems array\n          // and replace the matching product with the new item\n          // leave the rest products as they were\n          cartItems: state.cartItems.map(x => x.product === existItem.product ? item : x)\n        }; // otherwise if the item is NOT already a product matching the item in the state.cartItems array\n      } else {\n        // return the existing state with adjusted cardItems\n        return { ...state,\n          // return a new cardItems array with the previous products spread and add the new item\n          cartItems: [...state.cartItems, item]\n        };\n      }\n\n    case CART_REMOVE_ITEM:\n      return { ...state,\n        cartItems: state.cartItems.filter(x => x.product !== action.payload)\n      };\n\n    case CART_SAVE_SHIPPING_ADDRESS:\n      return { ...state,\n        shippingAddress: action.payload\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/g/Desktop/react-projects/ReactShop/frontend/src/reducers/cartReducers.js"],"names":["CART_ADD_ITEM","CART_REMOVE_ITEM","CART_SAVE_SHIPPING_ADDRESS","cartReducer","state","cartItems","shippingAddress","action","type","item","payload","existItem","find","x","product","map","filter"],"mappings":"AAAA,SACEA,aADF,EAEEC,gBAFF,EAGEC,0BAHF,QAIO,4BAJP;AAMA,OAAO,MAAMC,WAAW,GAAG,CACzBC,KAAK,GAAG;AAAEC,EAAAA,SAAS,EAAE,EAAb;AAAiBC,EAAAA,eAAe,EAAE;AAAlC,CADiB,EAEzBC,MAFyB,KAGtB;AACH,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,aAAL;AACE,YAAMS,IAAI,GAAGF,MAAM,CAACG,OAApB,CADF,CAEE;AACA;AACA;AACA;;AACA,YAAMC,SAAS,GAAGP,KAAK,CAACC,SAAN,CAAgBO,IAAhB,CAAsBC,CAAD,IAAOA,CAAC,CAACC,OAAF,KAAcL,IAAI,CAACK,OAA/C,CAAlB,CANF,CAQE;;AACA,UAAIH,SAAJ,EAAe;AACb;AACA,eAAO,EACL,GAAGP,KADE;AAEL;AACA;AACA;AACAC,UAAAA,SAAS,EAAED,KAAK,CAACC,SAAN,CAAgBU,GAAhB,CAAqBF,CAAD,IAC7BA,CAAC,CAACC,OAAF,KAAcH,SAAS,CAACG,OAAxB,GAAkCL,IAAlC,GAAyCI,CADhC;AALN,SAAP,CAFa,CAWb;AACD,OAZD,MAYO;AACL;AACA,eAAO,EACL,GAAGT,KADE;AAEL;AACAC,UAAAA,SAAS,EAAE,CAAC,GAAGD,KAAK,CAACC,SAAV,EAAqBI,IAArB;AAHN,SAAP;AAKD;;AAEH,SAAKR,gBAAL;AACE,aAAO,EACL,GAAGG,KADE;AAELC,QAAAA,SAAS,EAAED,KAAK,CAACC,SAAN,CAAgBW,MAAhB,CAAwBH,CAAD,IAAOA,CAAC,CAACC,OAAF,KAAcP,MAAM,CAACG,OAAnD;AAFN,OAAP;;AAIF,SAAKR,0BAAL;AACE,aAAO,EACL,GAAGE,KADE;AAELE,QAAAA,eAAe,EAAEC,MAAM,CAACG;AAFnB,OAAP;;AAKF;AACE,aAAON,KAAP;AA3CJ;AA6CD,CAjDM","sourcesContent":["import {\n  CART_ADD_ITEM,\n  CART_REMOVE_ITEM,\n  CART_SAVE_SHIPPING_ADDRESS,\n} from \"../constants/cartConstants\";\n\nexport const cartReducer = (\n  state = { cartItems: [], shippingAddress: {} },\n  action\n) => {\n  switch (action.type) {\n    case CART_ADD_ITEM:\n      const item = action.payload;\n      // search in the state.cartItems array\n      // for the existence of the specific product\n      // that is defined by item (by the action.payload)\n      // if we find a match assign the result to the existItem variable\n      const existItem = state.cartItems.find((x) => x.product === item.product);\n\n      // if there is already a product matching the item in the state.cartItems array\n      if (existItem) {\n        // return the existing state with adjusted cardItems\n        return {\n          ...state,\n          // map through the cardItems array\n          // and replace the matching product with the new item\n          // leave the rest products as they were\n          cartItems: state.cartItems.map((x) =>\n            x.product === existItem.product ? item : x\n          ),\n        };\n        // otherwise if the item is NOT already a product matching the item in the state.cartItems array\n      } else {\n        // return the existing state with adjusted cardItems\n        return {\n          ...state,\n          // return a new cardItems array with the previous products spread and add the new item\n          cartItems: [...state.cartItems, item],\n        };\n      }\n\n    case CART_REMOVE_ITEM:\n      return {\n        ...state,\n        cartItems: state.cartItems.filter((x) => x.product !== action.payload),\n      };\n    case CART_SAVE_SHIPPING_ADDRESS:\n      return {\n        ...state,\n        shippingAddress: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}