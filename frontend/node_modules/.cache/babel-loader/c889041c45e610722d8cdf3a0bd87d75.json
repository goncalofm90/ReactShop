{"ast":null,"code":"import _toConsumableArray from\"/Users/g/Desktop/react-projects/ReactShop/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/g/Desktop/react-projects/ReactShop/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{CART_ADD_ITEM,CART_REMOVE_ITEM,CART_SAVE_SHIPPING_ADDRESS,CART_SAVE_PAYMENT_METHOD}from\"../constants/cartConstants\";export var cartReducer=function cartReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{cartItems:[],shippingAddress:{}};var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case CART_ADD_ITEM:var item=action.payload;// search in the state.cartItems array\n// for the existence of the specific product\n// that is defined by item (by the action.payload)\n// if we find a match assign the result to the existItem variable\nvar existItem=state.cartItems.find(function(x){return x.product===item.product;});// if there is already a product matching the item in the state.cartItems array\nif(existItem){// return the existing state with adjusted cardItems\nreturn _objectSpread(_objectSpread({},state),{},{// map through the cardItems array\n// and replace the matching product with the new item\n// leave the rest products as they were\ncartItems:state.cartItems.map(function(x){return x.product===existItem.product?item:x;})});// otherwise if the item is NOT already a product matching the item in the state.cartItems array\n}else{// return the existing state with adjusted cardItems\nreturn _objectSpread(_objectSpread({},state),{},{// return a new cardItems array with the previous products spread and add the new item\ncartItems:[].concat(_toConsumableArray(state.cartItems),[item])});}case CART_REMOVE_ITEM:return _objectSpread(_objectSpread({},state),{},{cartItems:state.cartItems.filter(function(x){return x.product!==action.payload;})});case CART_SAVE_SHIPPING_ADDRESS:return _objectSpread(_objectSpread({},state),{},{shippingAddress:action.payload});case CART_SAVE_PAYMENT_METHOD:return _objectSpread(_objectSpread({},state),{},{paymentMethod:action.payload});default:return state;}};","map":{"version":3,"sources":["/Users/g/Desktop/react-projects/ReactShop/frontend/src/reducers/cartReducers.js"],"names":["CART_ADD_ITEM","CART_REMOVE_ITEM","CART_SAVE_SHIPPING_ADDRESS","CART_SAVE_PAYMENT_METHOD","cartReducer","state","cartItems","shippingAddress","action","type","item","payload","existItem","find","x","product","map","filter","paymentMethod"],"mappings":"yVAAA,OACEA,aADF,CAEEC,gBAFF,CAGEC,0BAHF,CAIEC,wBAJF,KAKO,4BALP,CAOA,MAAO,IAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAGtB,IAFHC,CAAAA,KAEG,2DAFK,CAAEC,SAAS,CAAE,EAAb,CAAiBC,eAAe,CAAE,EAAlC,CAEL,IADHC,CAAAA,MACG,2CACH,OAAQA,MAAM,CAACC,IAAf,EACE,IAAKT,CAAAA,aAAL,CACE,GAAMU,CAAAA,IAAI,CAAGF,MAAM,CAACG,OAApB,CACA;AACA;AACA;AACA;AACA,GAAMC,CAAAA,SAAS,CAAGP,KAAK,CAACC,SAAN,CAAgBO,IAAhB,CAAqB,SAACC,CAAD,QAAOA,CAAAA,CAAC,CAACC,OAAF,GAAcL,IAAI,CAACK,OAA1B,EAArB,CAAlB,CAEA;AACA,GAAIH,SAAJ,CAAe,CACb;AACA,sCACKP,KADL,MAEE;AACA;AACA;AACAC,SAAS,CAAED,KAAK,CAACC,SAAN,CAAgBU,GAAhB,CAAoB,SAACF,CAAD,QAC7BA,CAAAA,CAAC,CAACC,OAAF,GAAcH,SAAS,CAACG,OAAxB,CAAkCL,IAAlC,CAAyCI,CADZ,EAApB,CALb,GASA;AACD,CAZD,IAYO,CACL;AACA,sCACKT,KADL,MAEE;AACAC,SAAS,8BAAMD,KAAK,CAACC,SAAZ,GAAuBI,IAAvB,EAHX,GAKD,CAEH,IAAKT,CAAAA,gBAAL,CACE,sCACKI,KADL,MAEEC,SAAS,CAAED,KAAK,CAACC,SAAN,CAAgBW,MAAhB,CAAuB,SAACH,CAAD,QAAOA,CAAAA,CAAC,CAACC,OAAF,GAAcP,MAAM,CAACG,OAA5B,EAAvB,CAFb,GAIF,IAAKT,CAAAA,0BAAL,CACE,sCACKG,KADL,MAEEE,eAAe,CAAEC,MAAM,CAACG,OAF1B,GAIF,IAAKR,CAAAA,wBAAL,CACE,sCACKE,KADL,MAEEa,aAAa,CAAEV,MAAM,CAACG,OAFxB,GAIF,QACE,MAAON,CAAAA,KAAP,CA/CJ,CAiDD,CArDM","sourcesContent":["import {\n  CART_ADD_ITEM,\n  CART_REMOVE_ITEM,\n  CART_SAVE_SHIPPING_ADDRESS,\n  CART_SAVE_PAYMENT_METHOD,\n} from \"../constants/cartConstants\";\n\nexport const cartReducer = (\n  state = { cartItems: [], shippingAddress: {} },\n  action\n) => {\n  switch (action.type) {\n    case CART_ADD_ITEM:\n      const item = action.payload;\n      // search in the state.cartItems array\n      // for the existence of the specific product\n      // that is defined by item (by the action.payload)\n      // if we find a match assign the result to the existItem variable\n      const existItem = state.cartItems.find((x) => x.product === item.product);\n\n      // if there is already a product matching the item in the state.cartItems array\n      if (existItem) {\n        // return the existing state with adjusted cardItems\n        return {\n          ...state,\n          // map through the cardItems array\n          // and replace the matching product with the new item\n          // leave the rest products as they were\n          cartItems: state.cartItems.map((x) =>\n            x.product === existItem.product ? item : x\n          ),\n        };\n        // otherwise if the item is NOT already a product matching the item in the state.cartItems array\n      } else {\n        // return the existing state with adjusted cardItems\n        return {\n          ...state,\n          // return a new cardItems array with the previous products spread and add the new item\n          cartItems: [...state.cartItems, item],\n        };\n      }\n\n    case CART_REMOVE_ITEM:\n      return {\n        ...state,\n        cartItems: state.cartItems.filter((x) => x.product !== action.payload),\n      };\n    case CART_SAVE_SHIPPING_ADDRESS:\n      return {\n        ...state,\n        shippingAddress: action.payload,\n      };\n    case CART_SAVE_PAYMENT_METHOD:\n      return {\n        ...state,\n        paymentMethod: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}