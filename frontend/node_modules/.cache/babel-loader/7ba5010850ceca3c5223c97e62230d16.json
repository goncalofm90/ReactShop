{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { productListReducer, productDetailsReducer, productCreateReducer, productUpdateReducer, productDeleteReducer } from \"./reducers/productReducers\";\nimport { orderCreateReducer, orderDetailsReducer, orderPayReducer, orderListMyReducer, orderListReducer } from \"./reducers/orderReducers\";\nimport { userLoginReducer, userRegisterReducer, userDetailsReducer, userUpdateProfileReducer, userListReducer, userDeleteReducer, userUpdateReducer } from \"./reducers/userReducers\";\nimport { cartReducer } from \"./reducers/cartReducers\"; //all the reducers\n\nconst reducer = combineReducers({\n  productList: productListReducer,\n  productDetails: productDetailsReducer,\n  cart: cartReducer,\n  userLogin: userLoginReducer,\n  userRegister: userRegisterReducer,\n  userDetails: userDetailsReducer,\n  userUpdateProfile: userUpdateProfileReducer,\n  userList: userListReducer,\n  userDelete: userDeleteReducer,\n  productDelete: productDeleteReducer,\n  productCreate: productCreateReducer,\n  productUpdate: productUpdateReducer,\n  userUpdate: userUpdateReducer,\n  orderCreate: orderCreateReducer,\n  orderDetails: orderDetailsReducer,\n  orderPay: orderPayReducer,\n  //user order listing\n  orderListMy: orderListMyReducer,\n  orderList: orderListMyReducer\n}); //get data and put it in DB\n\nconst cartItemsFromStorage = localStorage.getItem(\"cartItems\") ? //If there are items in the DB, parse and return them\nJSON.parse(localStorage.getItem(\"cartItems\")) : //otherwise, return an empty array/object depending on the type of data\n[]; //userInfo\n\nconst userInfoFromStorage = localStorage.getItem(\"userInfo\") ? JSON.parse(localStorage.getItem(\"userInfo\")) : null; //shipping address\n\nconst shippingAddressFromStorage = localStorage.getItem(\"shippingAddress\") ? JSON.parse(localStorage.getItem(\"shippingAddress\")) : {};\nconst initialState = {\n  cart: {\n    cartItems: cartItemsFromStorage,\n    shippingAddress: shippingAddressFromStorage\n  },\n  userLogin: {\n    userInfo: userInfoFromStorage\n  }\n};\nconst middleware = [thunk];\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"sources":["/Users/g/Desktop/react-projects/ReactShop/frontend/src/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","productListReducer","productDetailsReducer","productCreateReducer","productUpdateReducer","productDeleteReducer","orderCreateReducer","orderDetailsReducer","orderPayReducer","orderListMyReducer","orderListReducer","userLoginReducer","userRegisterReducer","userDetailsReducer","userUpdateProfileReducer","userListReducer","userDeleteReducer","userUpdateReducer","cartReducer","reducer","productList","productDetails","cart","userLogin","userRegister","userDetails","userUpdateProfile","userList","userDelete","productDelete","productCreate","productUpdate","userUpdate","orderCreate","orderDetails","orderPay","orderListMy","orderList","cartItemsFromStorage","localStorage","getItem","JSON","parse","userInfoFromStorage","shippingAddressFromStorage","initialState","cartItems","shippingAddress","userInfo","middleware","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SACEC,kBADF,EAEEC,qBAFF,EAGEC,oBAHF,EAIEC,oBAJF,EAKEC,oBALF,QAMO,4BANP;AAOA,SACEC,kBADF,EAEEC,mBAFF,EAGEC,eAHF,EAIEC,kBAJF,EAKEC,gBALF,QAMO,0BANP;AAOA,SACEC,gBADF,EAEEC,mBAFF,EAGEC,kBAHF,EAIEC,wBAJF,EAKEC,eALF,EAMEC,iBANF,EAOEC,iBAPF,QAQO,yBARP;AASA,SAASC,WAAT,QAA4B,yBAA5B,C,CAEA;;AACA,MAAMC,OAAO,GAAGtB,eAAe,CAAC;AAC9BuB,EAAAA,WAAW,EAAEnB,kBADiB;AAE9BoB,EAAAA,cAAc,EAAEnB,qBAFc;AAG9BoB,EAAAA,IAAI,EAAEJ,WAHwB;AAI9BK,EAAAA,SAAS,EAAEZ,gBAJmB;AAK9Ba,EAAAA,YAAY,EAAEZ,mBALgB;AAM9Ba,EAAAA,WAAW,EAAEZ,kBANiB;AAO9Ba,EAAAA,iBAAiB,EAAEZ,wBAPW;AAQ9Ba,EAAAA,QAAQ,EAAEZ,eARoB;AAS9Ba,EAAAA,UAAU,EAAEZ,iBATkB;AAU9Ba,EAAAA,aAAa,EAAExB,oBAVe;AAW9ByB,EAAAA,aAAa,EAAE3B,oBAXe;AAY9B4B,EAAAA,aAAa,EAAE3B,oBAZe;AAa9B4B,EAAAA,UAAU,EAAEf,iBAbkB;AAc9BgB,EAAAA,WAAW,EAAE3B,kBAdiB;AAe9B4B,EAAAA,YAAY,EAAE3B,mBAfgB;AAgB9B4B,EAAAA,QAAQ,EAAE3B,eAhBoB;AAiB9B;AACA4B,EAAAA,WAAW,EAAE3B,kBAlBiB;AAmB9B4B,EAAAA,SAAS,EAAE5B;AAnBmB,CAAD,CAA/B,C,CAsBA;;AACA,MAAM6B,oBAAoB,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,IACzB;AACAC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CAFyB,GAGzB;AACA,EAJJ,C,CAMA;;AACA,MAAMG,mBAAmB,GAAGJ,YAAY,CAACC,OAAb,CAAqB,UAArB,IACxBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CADwB,GAExB,IAFJ,C,CAIA;;AACA,MAAMI,0BAA0B,GAAGL,YAAY,CAACC,OAAb,CAAqB,iBAArB,IAC/BC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAX,CAD+B,GAE/B,EAFJ;AAIA,MAAMK,YAAY,GAAG;AACnBvB,EAAAA,IAAI,EAAE;AACJwB,IAAAA,SAAS,EAAER,oBADP;AAEJS,IAAAA,eAAe,EAAEH;AAFb,GADa;AAKnBrB,EAAAA,SAAS,EAAE;AAAEyB,IAAAA,QAAQ,EAAEL;AAAZ;AALQ,CAArB;AAOA,MAAMM,UAAU,GAAG,CAAClD,KAAD,CAAnB;AACA,MAAMmD,KAAK,GAAGtD,WAAW,CACvBuB,OADuB,EAEvB0B,YAFuB,EAGvB7C,mBAAmB,CAACF,eAAe,CAAC,GAAGmD,UAAJ,CAAhB,CAHI,CAAzB;AAMA,eAAeC,KAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport {\n  productListReducer,\n  productDetailsReducer,\n  productCreateReducer,\n  productUpdateReducer,\n  productDeleteReducer,\n} from \"./reducers/productReducers\";\nimport {\n  orderCreateReducer,\n  orderDetailsReducer,\n  orderPayReducer,\n  orderListMyReducer,\n  orderListReducer,\n} from \"./reducers/orderReducers\";\nimport {\n  userLoginReducer,\n  userRegisterReducer,\n  userDetailsReducer,\n  userUpdateProfileReducer,\n  userListReducer,\n  userDeleteReducer,\n  userUpdateReducer,\n} from \"./reducers/userReducers\";\nimport { cartReducer } from \"./reducers/cartReducers\";\n\n//all the reducers\nconst reducer = combineReducers({\n  productList: productListReducer,\n  productDetails: productDetailsReducer,\n  cart: cartReducer,\n  userLogin: userLoginReducer,\n  userRegister: userRegisterReducer,\n  userDetails: userDetailsReducer,\n  userUpdateProfile: userUpdateProfileReducer,\n  userList: userListReducer,\n  userDelete: userDeleteReducer,\n  productDelete: productDeleteReducer,\n  productCreate: productCreateReducer,\n  productUpdate: productUpdateReducer,\n  userUpdate: userUpdateReducer,\n  orderCreate: orderCreateReducer,\n  orderDetails: orderDetailsReducer,\n  orderPay: orderPayReducer,\n  //user order listing\n  orderListMy: orderListMyReducer,\n  orderList: orderListMyReducer,\n});\n\n//get data and put it in DB\nconst cartItemsFromStorage = localStorage.getItem(\"cartItems\")\n  ? //If there are items in the DB, parse and return them\n    JSON.parse(localStorage.getItem(\"cartItems\"))\n  : //otherwise, return an empty array/object depending on the type of data\n    [];\n\n//userInfo\nconst userInfoFromStorage = localStorage.getItem(\"userInfo\")\n  ? JSON.parse(localStorage.getItem(\"userInfo\"))\n  : null;\n\n//shipping address\nconst shippingAddressFromStorage = localStorage.getItem(\"shippingAddress\")\n  ? JSON.parse(localStorage.getItem(\"shippingAddress\"))\n  : {};\n\nconst initialState = {\n  cart: {\n    cartItems: cartItemsFromStorage,\n    shippingAddress: shippingAddressFromStorage,\n  },\n  userLogin: { userInfo: userInfoFromStorage },\n};\nconst middleware = [thunk];\nconst store = createStore(\n  reducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}